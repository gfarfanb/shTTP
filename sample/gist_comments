#! /usr/bin/env bash
#  -author Giovanni Farf√°n B.

before_api() {
    basePath "/gists/$( get gistId )/comments"
    headers \
        "User-Agent: $( get appName )" \
        "Accept: application/vnd.github.$( get apiVersion ).full+json" \
        "Content-Type: application/vnd.github.$( get apiVersion ).full+json"
}

#  ./gist_comments get_all
get_all() {
    :
}

#  ./gist_comments get_comment
get_comment() {
    endpoint "/$( get commentId )"
}

before_post_comment() {
    authMode HEADER
    credential sample
}

#  ./gist_comments post_comment
post_comment() {
    body '{ "body": "shTTP-samples comment" }'
}

after_post_comment() {
    areEquals "Unexpected status" "201" "$( getStatus )"
    isNotNull "Comment ID not found" "$( getOutput id )"
    put commentId '.id'
}

#  ./gist_comments patch_comment
patch_comment() {
    authMode HEADER
    credential sample
    endpoint "/$( get commentId )"
    body '{ "body": "'
    # 5 times
    body 0 '5t' 'Lorem ipsum '
    # 150 bytes of size
    body 0 '150s' 'Lorem ipsum '
    body '" }'
}

after_patch_comment() {
    areEquals "Unexpected status" "200" "$( getStatus )"
}

#  ./gist_comments patch_comment --auth-header sample
delete_comment() {
    endpoint "/$( get commentId )"
}

after_delete_comment() {
    areEquals "Unexpected status" "204" "$( getStatus )"
    remove commentId
}

#  ./gist_comments only_def
get_only_def() {
    endpoint "/not_implemented_yet/$( get commentId )"
    mockEnabled
    mockOutput "{ \"column\": \"value\" }"
    mockStatus 403
    mockHeaders 'Expected-Header: 5134123123'
}

after_get_only_def() {
    isNotNull "Column not found" "$( getOutput column )"
    areEquals "Unexpected status" "403" "$( getStatus )"
    areEquals "Unexpected header" "5134123123" "$( getHeader 'Expected-Header' )"
}

after_api() {
    warn "Flow discard execution of this function"
}

before_flow() {
    info "This will be executed before every flow call"
}

before_flow_comment() {
    mainOpts --auth-header sample
}

#  ./gist_comments flow_comment
flow_comment() {
    step post_comment
    step patch_comment --auth-header sample
    step delete_comment --auth-header sample
    step get_only_def
}

after_flow_comment() {
    info "This will be executed after 'flow_comment' call"
}

after_flow() {
    info "This will be executed after every flow call"
}

#  shellcheck disable=SC1091
. ../http_api
