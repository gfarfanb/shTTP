#! /usr/bin/env bash
#  -author Giovanni Farfan B.

before_api() {
    domain "api.github.com"
    basePath "/authorizations"
}

#  ./github_oauth get_user
get_user() {
    authMode BASIC
    credential sample
    basePath "/user"
}

#  ./github_oauth get_auths --auth-basic sample --set otp <2fa-token>
#  ./github_oauth get_auths --auth-basic sample
get_auths() {
    protocol https
    # hd "X-GitHub-OTP" "$( get otp )"
}

before_put_auth() {
    local _fingerprint=""
    _fingerprint=$( str_rnd 25 )
    _fingerprint=$( str_rev "$_fingerprint" )
    put fingerprint "\"$_fingerprint\"" PRIVATE
}

#  ./github_oauth put_auth --set otp <2fa-token>
#  ./github_oauth put_auth
put_auth() {
    authMode BASIC
    credential sample
    endpoint "/clients/$( getPart key )"
    # hd "X-GitHub-OTP" "$( get otp )"
    body "{
            \"scopes\": [
                \"gist\"
            ],
            \"note\": \"Execute shTTP samples\",
            \"client_secret\": \"$( getPart secret )\",
            \"fingerprint\": \"$( get fingerprint )\"
        }"
}

after_put_auth() {
    local _last_token=""
    _last_token=$( getOutput token )
    isTrue "Token is already in use" "-n '$_last_token'"
    if [ -n "$_last_token" ]; then
        putPart 'token' "$_last_token"
    else
        error "Token is already in use, remove that authorization"
    fi
    put 'authId' '.id' PRIVATE
}

before_check_auth() {
    local _token=""
    _token=$( getPart token )
    if [ "$_token" = "null" ]; then
        fatal "Token not found"
    fi
}

#  ./github_oauth check_auth
check_auth() {
    method GET
    #  'auth_ext' extension.
    authMode MANUAL
    credential sample
    basePath "/applications/$( getPart key )/tokens/$( getPart token )"
}

after_check_auth() {
    local _token=""
    _token=$( getOutput token )
    isTrue "Token is already in use" "-n '$_token'"
    putPart token "$_token"
}

#  ./github_oauth delete_auth --set otp <2fa-token>
#  ./github_oauth delete_auth
delete_auth() {
    authMode BASIC
    credential sample
    endpoint "/$( get authId )"
    # hd "X-GitHub-OTP" "$( get otp )"
}

after_delete_auth() {
    areEquals "Unexpected status" "204" "$( getStatus )"
}

after_api() {
    info "This will be executed after every request call"
}

#  shellcheck disable=SC1091
. ../shttp
