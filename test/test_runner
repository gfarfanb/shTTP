#! /usr/bin/env bash
#  Test runner for unit tests.
#  -author Giovanni Farf√°n B.
set -euo pipefail
IFS=$'\n\t'

#  Show the help content.
_help_test_runner() {
    local _content=(
        " Test runner for unit tests."
        ""
        " Usage: ./test_runner <test> [--list] [--help]"
        ""
        " Options:"
        "   --list:  Display the <test> list. Test files must follow"
        "              the next rules:"
        "                1. Test filename with pattern '<name>_test'."
        "                2. Test file in where 'test_runner' is."
        "                3. No execution permissions are required"
        "                   for test files."
        "   --help:  Display this help message."
    )
    echo "${_content[*]}"
}
expr "$*" : ".*--help" > /dev/null \
    && _help_test_runner \
    && exit 0


#  Script filename.
readonly _test_basename=$( basename "$0" )


# ---------- Logging functions

#  Log filename.
#
#  -param $* Log message
readonly _test_log_file="/tmp/shTTP_${_test_basename%.*}.$( date '+%Y-%m-%d' ).log"

#  Log a message object with the INFO level.
#
#  -param $* Log message
info() { echo "$( date '+%Y-%m-%d %T.%N' ) [INFO]    $*" | tee -a "$_test_log_file" >&2 ; }

#  Log a message object with the WARNING level.
#
#  -param $* Log message
warning() { echo "$( date '+%Y-%m-%d %T.%N' ) [WARNING] $*" | tee -a "$_test_log_file" >&2 ; }

#  Log a message object with the ERROR level.
#
#  -param $* Log message
error() { echo "$( date '+%Y-%m-%d %T.%N' ) [ERROR]   $*" | tee -a "$_test_log_file" >&2 ; }

#  Log a message object with the FATAL level, 
#+ exit execution with 1.
#
#  -param $* Log message
fatal() { echo "$( date '+%Y-%m-%d %T.%N' ) [FATAL]   $*" | tee -a "$_test_log_file" >&2 ; exit 1 ; }


# ---------- Option functions

#  List the names of the executable
#+ tests. A valid test filename must
#+ follow the pattern '<name>_test'.
#  The test files must be in the same
#+ directory where 'test_runner' is.
_list_tests() {
    declare -a _tests=(
        $( find . -name "*_test" -type f )
    )
    local _length=${#_tests[@]}
    if (( _length > 0 )); then
        for _test in "${_tests[@]}"; do
            local _name=""
            _name=$( echo "$_test" | cut -d '_' -f 1 )
            _name=${_name//\.\//}
            echo "$_name"
        done
    else
        info "Not tests found"
    fi
}
expr "$*" : ".*--list" > /dev/null \
    && _list_tests \
    && exit 0


# ---------- Variables initialization

#  Assertions count.
_test_runner_assertions=0

#  Failed assertions count.
_test_runner_failures=0

#  All tests executed flag.
_test_runner_completed=0


# ---------- Internal functions

#  Increase by 1 the '_test_runner_assertions' count.
_inc_asserts() {
    _test_runner_assertions=$(( _test_runner_assertions+1 ))
}

#  Print the failed test message and
#+ increase the '_test_runner_failures' count.
_fail() {
    info ">>>   [FAILED]   $*"
    _test_runner_failures=$(( _test_runner_failures+1 ))
}

#  Print the test results and execute
#+ the global after-tests script.
#  This function is called after 
#+ execute the main code or after
#+ get an error.
_finally_test_runner() {
    local _code=$?
    if [ $_code != 0 ]; then
        error "$( basename "$0" ): [INTERRUPTED] - [$_test_runner_failures] of [$_test_runner_assertions] assertions failed"
    else
        if [ $_test_runner_failures = 0 ]; then
            info "$( basename "$0" ): [PASSED] - [$_test_runner_assertions] of [$_test_runner_assertions] assertions passed"
        else
            info "$( basename "$0" ): [FAILED] - [$_test_runner_failures] of [$_test_runner_assertions] assertions failed"
        fi
    fi
    #  shellcheck disable=SC1091
    . ./test_after_tests
    if [ $_test_runner_failures = 0 ] && [ $_test_runner_completed = 1 ]; then
        exit 0
    else
        exit $_code
    fi
}


# ---------- Main

#  Main code:
#    1. Execute the global before-tests
#+      script.
#    2. Import the asserts functions.
#    3. Verify the kind of execution:
#+      single test or all tests.
#    4. Execute test(s).
#    5. Check '_test_runner_completed' flag.
#    6. Finally function is executed.
if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    trap _finally_test_runner EXIT
    #  shellcheck disable=SC1091
    . ./test_before_tests
    #  shellcheck disable=SC1091
    . ./test_asserts
    readonly _single=${1:-}
    if [ -n "$_single" ]; then
        info "+++ Test [./${_single}_test] sourced"
        eval ". ./${_single}_test"
    else
        declare -a _tests=(
            $( find . -name "*_test" -type f )
        )
        _length=${#_tests[@]}
        if (( _length > 0 )); then
            for _test in "${_tests[@]}"; do
                info "+++ Test [$_test] sourced"
                eval ". $_test"
            done
        else
            info "Not tests found"
        fi
    fi
    _test_runner_completed=1
fi
