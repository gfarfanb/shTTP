#! /usr/bin/env bash
#  Tests for 'shttp' builder functions.
#  -author Giovanni Farfan B.


#  -test Set URL
url "https://any.host/any/endpoint"
#  shellcheck disable=SC2154
assertEquals "Set URL does not work" "https://any.host/any/endpoint" "$_shttp_url"
_reset_req_vars


#  -test Set protocol
protocol ftp
#  shellcheck disable=SC2154
assertEquals "Set protocol does not work" "ftp" "$_shttp_protocol"
_reset_req_vars


#  -test Set domain
domain "0.0.0.0:0000"
#  shellcheck disable=SC2154
assertEquals "Set domain does not work" "0.0.0.0:0000" "$_shttp_domain"
_reset_req_vars


#  -test Set port
port "0000"
#  shellcheck disable=SC2154
assertEquals "Set port does not work" "0000" "$_shttp_port"
_reset_req_vars


#  -test Set local
localPort "8080"
#  shellcheck disable=SC2154
assertEquals "Set local does not work" "8080" "$_shttp_local"
_reset_req_vars


#  -test Set endpoint
basePath "api/path"
#  shellcheck disable=SC2154
assertEquals "Set base path does not work" "api/path" "$_shttp_base_path"
_reset_req_vars


#  -test Set endpoint
endpoint "id/test"
#  shellcheck disable=SC2154
assertEquals "Set endpoint does not work" "id/test" "$_shttp_endpoint"
_reset_req_vars


#  -test Set method
method "GET"
#  shellcheck disable=SC2154
assertEquals "Method 'GET' not found" "GET" "$_shttp_method"

method "POST"
#  shellcheck disable=SC2154
assertEquals "Method 'POST' not found" "POST" "$_shttp_method"

method "PUT"
#  shellcheck disable=SC2154
assertEquals "Method 'PUT' not found" "PUT" "$_shttp_method"

method "PATCH"
#  shellcheck disable=SC2154
assertEquals "Method 'PATCH' not found" "PATCH" "$_shttp_method"

method "DELETE"
#  shellcheck disable=SC2154
assertEquals "Method 'DELETE' not found" "DELETE" "$_shttp_method"

method "HEAD"
#  shellcheck disable=SC2154
assertEquals "Method 'HEAD' not found" "HEAD" "$_shttp_method"

method "OPTIONS"
#  shellcheck disable=SC2154
assertEquals "Method 'OPTIONS' not found" "OPTIONS" "$_shttp_method"

_reset_req_vars


#  -test Set headers
hd "Alias-H-1" "alias/1"
hd "Alias-H-2" "alias/2"
hd "Alias-H-3" "alias/3"
#  shellcheck disable=SC2154
_length=${#_shttp_headers[@]}
assertEquals "Set headers by alias does not work" 3 "$_length"
_reset_req_vars

header "Header-1" "test/1"
header "Header-2" "test/2"
header "Header-3" "test/3"
#  shellcheck disable=SC2154
_length=${#_shttp_headers[@]}
assertEquals "Set headers does not work" 3 "$_length"
_reset_req_vars

hd "Content-Type" "content/1"
hd "Content-Type" "content/2"
hd "Content-Type" "content/3"
#  shellcheck disable=SC2154
_length=${#_shttp_headers[@]}
assertEquals "Set repeated headers does not work" 3 "$_length"
_reset_req_vars

hd "Content-Type" "content/1"
hd "Content-Type" "content/2"
hd "!Content-Type" "content/definitive"
#  shellcheck disable=SC2154
_length=${#_shttp_headers[@]}
assertEquals "Set unique headers does not work" 1 "$_length"
_reset_req_vars


#  -test Set body
body '{' '"key": "value"' ',' '"name": "test"' '}'
#  shellcheck disable=SC2154
_length=$( stat -c%s "$_shttp_body" )
assertTrue "Set body does not work" "$_length -eq 31"
_reset_req_vars

body 0 '5t' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_body" )
assertTrue "Set body does not work [times]" "$_length -eq 55"
_reset_req_vars

body 0 '5tn' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_body" )
assertTrue "Set body does not work [times+new_lines]" "$_length -eq 60"
_reset_req_vars

body 0 '110s' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_body" )
assertTrue "Set body does not work [size]" "$_length -eq 110"
_reset_req_vars

body 0 '110sn' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_body" )
assertTrue "Set body does not work [size+new_lines]" "$_length -eq 120"
_reset_req_vars


#  -test Set body file
_shttp_body=""
echo "{}" > ws/request_body.json
bodyAsFile ws/request_body.json

assertTrue "Body file not found" "-f \"$_shttp_body\""
assertTrue "Body file is empty" "-s \"$_shttp_body\""
_reset_req_vars


#  -test Set form
form "key" "value"
form "name" "test"
#  shellcheck disable=SC2154
_length=${#_shttp_form[@]}
assertEquals "Set form does not work" 2 "$_length"
_reset_req_vars


#  -test Set form file field
output "output/form-file-field.$( date '+%s.%N' )"
formFilePart file '{' '"key": "value"' ',' '"name": "test"' '}'
#  shellcheck disable=SC2154
_length=$( stat -c%s "$_shttp_output.form.field.file" )
assertTrue "Set form-file-field-1 does not work" "$_length -eq 31"
_reset_req_vars

output "output/form-file-field.$( date '+%s.%N' )"
formFilePart file 0 '5t' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_output.form.field.file" )
assertTrue "Set form-file-field does not work [times]" "$_length -eq 55"
_reset_req_vars

output "output/form-file-field.$( date '+%s.%N' )"
formFilePart file 0 '5tn' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_output.form.field.file" )
assertTrue "Set form-file-field-3 does not work [times+new_line]" "$_length -eq 60"
_reset_req_vars

output "output/form-file-field.$( date '+%s.%N' )"
formFilePart file 0 '110s' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_output.form.field.file" )
assertTrue "Set form-file-field does not work [size]" "$_length -eq 110"
_reset_req_vars

output "output/form-file-field.$( date '+%s.%N' )"
formFilePart file 0 '110sn' 'Lorem ipsum'
_length=$( stat -c%s "$_shttp_output.form.field.file" )
assertTrue "Set form-file-field does not work [size+new_line]" "$_length -eq 120"
_reset_req_vars

output "output/form-file-field.$( date '+%s.%N' )"
formFilePart "key" "value"
formFilePart "name" "test"
#  shellcheck disable=SC2154
_length=${#_shttp_form_files[@]}
assertEquals "Set form-file-field-4 does not work" 2 "$_length"
_reset_req_vars


#  -test Set query parameters
qp "key" "value"
qp "name" "test"
#  shellcheck disable=SC2154
_length=${#_shttp_query_params[@]}
assertEquals "Set query parameters by alias does not work" 2 "$_length"
_reset_req_vars

queryParam "key" "value"
queryParam "name" "test"
#  shellcheck disable=SC2154
_length=${#_shttp_query_params[@]}
assertEquals "Set query parameters does not work" 2 "$_length"
_reset_req_vars


#  -test Set cURL options
curlOpts "--basic" "-u user:password"
#  shellcheck disable=SC2154
_length=${#_shttp_curl_opts[@]}
assertEquals "Set cURL options does not work" 2 "$_length"
_reset_req_vars


#  -test Set authorization mode
authMode "BASIC"
#  shellcheck disable=SC2154
assertEquals "'BASIC' mode not found" "BASIC" "$_shttp_auth_mode"

authMode "HEADER"
#  shellcheck disable=SC2154
assertEquals "'HEADER' mode not found" "HEADER" "$_shttp_auth_mode"

authMode "QPARAM"
#  shellcheck disable=SC2154
assertEquals "'QPARAM' mode not found" "QPARAM" "$_shttp_auth_mode"

authMode "SKIP"
#  shellcheck disable=SC2154
assertEquals "'SKIP' mode not found" "SKIP" "$_shttp_auth_mode"

_reset_req_vars


#  -test Set authentication credential
credential 'user'
#  shellcheck disable=SC2154
assertEquals "Set credential does not work" "user" "$_shttp_auth_credential"
_reset_req_vars


#  -test Set request execution times
times 5
#  shellcheck disable=SC2154
assertEquals "Set request times does not work" 5 "$_shttp_request_times"
_shttp_request_times=0


#  -test Set editor command
editor 'vim script'
#  shellcheck disable=SC2154
assertEquals "Set editor command does not work" "vim script" "$_shttp_editor_command"
_reset_req_vars


#  -test Set output
output 'output/response'
#  shellcheck disable=SC2154
assertEquals "Set output does not work" "output/response" "$_shttp_output"
_reset_req_vars


#  -test Set environment
echo '{ }' > ws/config.test.json
echo '[ ]' > ws/credentials.test.json

env "test"

#  shellcheck disable=SC2154
assertEquals "Configuration 'test' not found" "ws/config.test.json" "$_shttp_env"
#  shellcheck disable=SC2154
assertEquals "Credentials 'test' not found" "ws/credentials.test.json" "$_shttp_creds"

env
rm -f ws/config.test.json
rm -f ws/credentials.test.json


#  -test Set options
_shttp_input_params=""
mainOpts --set a a --set b b
_input_parameters=( $(echo "$_shttp_input_params" | tr " " "\n") )
_input_length=${#_input_parameters[@]}
assertEquals "Main options not set" 6 "$_input_length"

_shttp_input_params="get_all --auth-header test"
mainOpts --set a a --set b b
_input_parameters=( $(echo "$_shttp_input_params" | tr " " "\n") )
_input_length=${#_input_parameters[@]}
assertEquals "Main options set" 3 "$_input_length"

_shttp_input_params=""
