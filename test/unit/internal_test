#! /usr/bin/env bash
#  Tests for 'http_api' internal functions.
#  -author Giovanni Farf√°n B.


#  -test Is key function
_is_key=$( _is_keyword 'before_api' )
assertEquals "'before_api' is not key" 1 "$_is_key"

_is_key=$( _is_keyword 'after_api' )
assertEquals "'after_api' is not key" 1 "$_is_key"

_is_key=$( _is_keyword 'whatever' )
assertEquals "'whatever' is key" 0 "$_is_key"


#  -test Has function
_has_info=$( _has_func info )
assertEquals "'info' function not found" 1 "$_has_info"

_has_warning=$( _has_func warning )
assertEquals "'warning' function not found" 1 "$_has_warning"

_has_error=$( _has_func error )
assertEquals "'error' function not found" 1 "$_has_error"

_has_fatal=$( _has_func fatal )
assertEquals "'fatal' function not found" 1 "$_has_fatal"


#  -test Execute if exist
_check_exist=0

complete_check() {
    _check_exist=1
}

_execute_if_exist complete_check

assertEquals "'complete_check' function not found" 1 "$_check_exist"


#  -test Request lifecycle
_before_api_var="Not executed yet"
_after_api_var="Not executed yet"

before_api() {
    _before_api_var="Executed"
}

get_repo() {
    protocol http
    #  shellcheck disable=SC2034
    URL="127.0.0.1:5555/info"
}

after_api() {
    _after_api_var="Executed"
}

_execute get_repo
put '.name'

_info_name=$( get name )

assertEquals "'before_api' not executed" "Executed" "$_before_api_var"
assertEquals "Lifecycle not executed" "shTTP" "$_info_name"
assertEquals "'after_api' not executed" "Executed" "$_after_api_var"


#  -test Request execution
_before_request_var="Not executed yet"
_after_request_var="Not executed yet"

protocol http
#  shellcheck disable=SC2034
URL="127.0.0.1:5555/info"
method "GET"

before_command() {
    _before_request_var="Executed"
}

after_command() {
    _after_request_var="Executed"
}

_request command

assertEquals "'before_<command>' chain not executed" "Executed" "$_before_request_var"
#  shellcheck disable=SC2154
assertTrue "Trace file does not exist" "-f \"$_shttp_output.trace\""
#  shellcheck disable=SC2154
assertTrue "JSON file does not exist" "-f \"$_shttp_output.output\""
assertEquals "'after_<command>' not executed" "Executed" "$_after_request_var"

_info_pronounced=$( < "$_shttp_output.output" jq ".pronounced" )

assertEquals "Request not executed" "\"shell-ttp\"" "$_info_pronounced"

_init_vars


#  -test Set request method
_init_vars
get_api() { : ; }
_set_method "get_api"
#  shellcheck disable=SC2154
assertEquals "'get_api' has no method" "GET" "$_shttp_method"

_init_vars
post_api() { : ; }
_set_method "post_api"
assertEquals "'post_api' has no method" "POST" "$_shttp_method"

_init_vars
put_api() { : ; }
_set_method "put_api"
#  shellcheck disable=SC2154
assertEquals "'put_api' has no method" "PUT" "$_shttp_method"

_init_vars
patch_api() { : ; }
_set_method "patch_api"
#  shellcheck disable=SC2154
assertEquals "'patch_api' has no method" "PATCH" "$_shttp_method"

_init_vars
delete_api() { : ; }
_set_method "delete_api"
#  shellcheck disable=SC2154
assertEquals "'delete_api' has no method" "DELETE" "$_shttp_method"

_init_vars
head_api() { : ; }
_set_method "head_api"
#  shellcheck disable=SC2154
assertEquals "'head_api' has no method" "HEAD" "$_shttp_method"

_init_vars
options_api() { : ; }
_set_method "options_api"
#  shellcheck disable=SC2154
assertEquals "'options_api' has no method" "OPTIONS" "$_shttp_method"

_init_vars
unknown_api() { : ; }
_set_method "unknown_api"
#  shellcheck disable=SC2154
assertTrue "'unknown_api' has method" "-z \"$_shttp_method\""

_init_vars


#  -test Append if missing header
_init_vars

_append_if_missing_header "Missing-Header" "test/value"

_found=0
#  shellcheck disable=SC2154
for _header in "${_shttp_headers[@]}"; do
    if [[ "$_header" == "Missing-Header:"* ]]; then
        _found=1
        break
    fi
done

assertEquals "'Missing-Header' does not exist" 1 "$_found"

headers "Present-Header: test/value"

_append_if_missing_header "Present-Header" "test/value.new"

_found=0
for _header in "${_shttp_headers[@]}"; do
    if [[ "$_header" == *"test/value.new" ]]; then
        _found=1
        break
    fi
done

assertEquals "'Present-Header' change its value" 0 "$_found"

_init_vars


#  -test Append Content-Type
_init_vars

_append_content_type

_found=0
for _header in "${_shttp_headers[@]}"; do
    if [ "$_header" = "Content-Type: application/json" ]; then
        _found=1
        break
    fi
done

assertEquals "'application/json' is not present" 1 "$_found"

_init_vars
form "key=value"

_append_content_type

_found=0
for _header in "${_shttp_headers[@]}"; do
    if [ "$_header" = "Content-Type: multipart/form-data" ]; then
        _found=1
        break
    fi
done

assertEquals "'multipart/form-data' is not present" 1 "$_found"

_init_vars


#  -test Append Authentication
put apiToken "\"uqweq8u23j23e\""
put host "\"any.host\""

_init_vars
AUTH_MODE="HEADER"

_append_auth

_found=0
for _header in "${_shttp_headers[@]}"; do
    case "$_header" in
        "Authorization: Bearer uqweq8u23j23e")
            _found=$(( _found+1 ))
        ;;
        "Host: any.host")
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "'HEADER' mode not set" 2 "$_found"

_init_vars
AUTH_MODE="QPARAM"

_append_auth

_found=0
if [[ "$URL" == *"?token=uqweq8u23j23e" ]]; then
    _found=$(( _found+1 ))
fi
for _header in "${_shttp_headers[@]}"; do
    if [ "$_header" = "Host: any.host" ]; then
        _found=$(( _found+1 ))
        break
    fi
done

assertEquals "'QPARAM' mode not set" 2 "$_found"

_init_vars
#  shellcheck disable=SC2034
AUTH_MODE="SKIP"

_append_auth

_length=${#_shttp_headers[@]}

assertEquals "'SKIP' mode not set" 0 "$_length"

remove apiToken
remove host


#  -test Append body to file
body '{ "body": "content" }'
_body_file=$( _append_body_to_file )
assertTrue "Body temporal file does not exist" "-f \"$_body_file\""
_init_vars

_body_file=$( _append_body_to_file )
assertFalse "Body temporal file exists" "-f \"$_body_file\""
_init_vars

body '{' \
    '"body": "content"' \
    '}'
_body_file=$( _append_body_to_file )
assertTrue "Body (parts) temporal file does not exist" "-f \"$_body_file\""
_init_vars

_body_file=$( _append_body_to_file )
assertFalse "Body (parts) temporal file exists" "-f \"$_body_file\""
_init_vars


#  -test Build cURL
URL="any.host/any/endpoint"
method "POST"
output "result"
headers "Defined-Header: test/value"
queryParams "param=value"
form "key=value"
CURL_OPT=(
    "--basic"
    "-u user:password"
)
_expected=(
    "curl -X POST -s -v -o \"result.output\" \\"
    "-H \"Defined-Header: test/value\" \\"
    "-d \"param=value\" \\"
    "-F \"key=value\" \\"
    "--data-binary \"@ws/body_file.json.temp\" \\"
    "--basic \\"
    "-u user:password \\"
    "https://any.host/any/endpoint > \"result.trace\" 2>&1"
)
_curl=$( _build_curl "ws/body_file.json.temp" )

assertEquals "'cURL' command bad" "${_expected[*]}" "$_curl"

_init_vars


#  -test Clean trace
_trace=(
    "* Unused line"
    "> GET /endpoint HTTP/1.1"
    "> "
    "> HTTP/1.1 200 Ok"
    "* Unused line"
    "{ [5 bytes data]"
)
output "output/trace.$( date '+%s.%N' ).json.tmp"
for _line in "${_trace[@]}"; do
    echo "$_line" | tee -a "$_shttp_output.trace" > /dev/null
done

_body_file="ws/body.$( date '+%s.%N' ).json.tmp"
echo '{ "body": "content" }' | tee -a "$_body_file" > /dev/null

_curl='curl https://any.host/any/endpoint'

_clean_trace "$_curl" "$_body_file"

#  shellcheck disable=SC2178
_expected='GET /endpoint HTTP/1.1

{{body}}

HTTP/1.1 200 Ok

>>>>> body
{ "body": "content" }

>>>>> curl
curl https://any.host/any/endpoint' 
#  shellcheck disable=SC2178
_trace=$( cat "$_shttp_output.trace" )

#  shellcheck disable=SC2128
assertEquals "Clean trace file does not work" "$_expected" "$_trace"

_init_vars


#  -test Open editor command
put program "\"jq\""

#  shellcheck disable=SC2016
EDITOR_COMMAND='_command_version="$( $( get program ) --version )"'

_editor_command

#  shellcheck disable=SC2154
assertTrue "Open editor command does not work" "-n \"$_command_version\""

_init_vars


#  -test Script finallly
echo '{}' > ws/cleanable_config.json.tmp

_finally_http_api

assertFalse "Workspace file is currently exists" "-f ws/cleanable_config.json.tmp"
