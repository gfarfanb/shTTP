#! /usr/bin/env bash
#  Tests for 'http_api' internal functions.
#  -author Giovanni Farf√°n B.


#  -test Is key function
_is_key=$( _is_keyword 'before_api' )
assertEquals "'before_api' is not key" 1 "$_is_key"

_is_key=$( _is_keyword 'after_api' )
assertEquals "'after_api' is not key" 1 "$_is_key"

_is_key=$( _is_keyword 'whatever' )
assertEquals "'whatever' is key" 0 "$_is_key"


#  -test Has function
_has_info=$( _has_func info )
assertEquals "'info' function not found" 1 "$_has_info"

_has_warning=$( _has_func warning )
assertEquals "'warning' function not found" 1 "$_has_warning"

_has_error=$( _has_func error )
assertEquals "'error' function not found" 1 "$_has_error"

_has_fatal=$( _has_func fatal )
assertEquals "'fatal' function not found" 1 "$_has_fatal"


#  -test Execute if exist
_check_exist=0

complete_check() {
    _check_exist=1
}

_execute_if_exist complete_check

assertEquals "'complete_check' function not found" 1 "$_check_exist"


#  -test Flow lifecycle

#  shellcheck disable=SC2034
_shttp_execution_type="FLOW"
_before_every_flow_var="Not executed yet"
_before_flow_call_var="Not executed yet"
_after_flow_call_var="Not executed yet"
_after_every_flow_var="Not executed yet"
_flow_execution_count=0

get_repo_flow() {
    url "http://127.0.0.1:5555/info"
    _flow_execution_count=$(( _flow_execution_count+1 ))
}

before_flow() {
    _before_every_flow_var="Executed"
}

before_flow_get_repo() {
    _before_flow_call_var="Executed"
}

flow_get_repo() {
    step get_repo_flow --local
    step get_repo_flow --auth-basic user
    step get_repo_flow
    step get_repo_flow --set a 5
}

after_flow_get_repo() {
    _after_flow_call_var="Executed"
}

after_flow() {
    _after_every_flow_var="Executed"
}

_execute_flow flow_get_repo

assertEquals "'before_flow' not executed" "Executed" "$_before_every_flow_var"
assertEquals "'before_flow_get_repo' not executed" "Executed" "$_before_flow_call_var"
assertEquals "'flow_get_repo' not executed" 4 "$_flow_execution_count"
assertEquals "'after_flow_get_repo' not executed" "Executed" "$_after_flow_call_var"
assertEquals "'after_flow' not executed" "Executed" "$_after_every_flow_var"


#  -test Request lifecycle

#  shellcheck disable=SC2034
_shttp_execution_type="REQUEST"
_before_api_var="Not executed yet"
_after_api_var="Not executed yet"
_execution_count=0

before_api() {
    _before_api_var="Executed"
}

get_repo_lifecycle() {
    url "http://127.0.0.1:5555/info"
}

after_api() {
    _after_api_var="Executed"
    put '.name'
}

_execute get_repo_lifecycle

_info_name=$( get name )

assertEquals "'before_api' not executed" "Executed" "$_before_api_var"
assertEquals "Lifecycle not executed" "shTTP" "$_info_name"
assertEquals "'after_api' not executed" "Executed" "$_after_api_var"

_execution_count=0

get_repo_times() {
    url "http://127.0.0.1:5555/info"
    _execution_count=$(( _execution_count+1 ))
    #  shellcheck disable=SC2154
    assertEquals "Incorrect index execution" "$_shttp_request_index" "$_execution_count"
}

_execute get_repo_times 5

assertEquals "Incorrect number of executions" 5 "$_execution_count"
#  shellcheck disable=SC2154
assertEquals "Request index was not reset" 0 "$_shttp_request_index"


#  -test Initialize request variables
_shttp_url="not-empty"
_shttp_protocol="not-empty"
_shttp_domain="not-empty"
_shttp_method="not-empty"
_shttp_base_path="not-empty"
_shttp_endpoint="not-empty"
_shttp_headers=( "not-empty" )
_shttp_body=( "not-empty" )
_shttp_form=( "not-empty" )
_shttp_query_params=( "not-empty" )
_shttp_curl_opts=( "not-empty" )
_shttp_auth_mode="not-empty"
_shttp_auth_credential="not-empty"
_shttp_editor_command="not-empty"
_shttp_output="not-empty"

_reset_req_vars

assertTrue "'_shttp_url' is not empty" "-z \"$_shttp_url\""
assertTrue "'_shttp_protocol' is not empty" "-z \"$_shttp_protocol\""
assertTrue "'_shttp_domain' is not empty" "-z \"$_shttp_domain\""
assertTrue "'_shttp_method' is not empty" "-z \"$_shttp_method\""
assertTrue "'_shttp_base_path' is not empty" "-z \"$_shttp_base_path\""
assertTrue "'_shttp_endpoint' is not empty" "-z \"$_shttp_endpoint\""

_length=${#_shttp_headers[@]}
assertEquals "'_shttp_headers' is not empty" 0 "$_length"

_length=${#_shttp_body[@]}
assertEquals "'_shttp_body' is not empty" 0 "$_length"

_length=${#_shttp_form[@]}
assertEquals "'_shttp_form' is not empty" 0 "$_length"

_length=${#_shttp_query_params[@]}
assertEquals "'_shttp_query_params' is not empty" 0 "$_length"

_length=${#_shttp_curl_opts[@]}
assertEquals "'_shttp_curl_opts' is not empty" 0 "$_length"

assertTrue "'_shttp_auth_mode' is not empty" "-z \"$_shttp_auth_mode\""
assertTrue "'_shttp_auth_credential' is not empty" "-z \"$_shttp_auth_credential\""
assertTrue "'_shttp_editor_command' is not empty" "-z \"$_shttp_editor_command\""
assertTrue "'_shttp_output' is not empty" "-z \"$_shttp_output\""


#  -test Default values from config
update "ws/config.json" '. + {
        "protocol": "any-protocol",
    	"domain": "any-domain",
    	"basePath": "any-base-path",
    	"endpoint": "any-endpoint",
    	"method": "GET",
    	"headers": [
    	    "Any-Header: test/value"
    	 ],
    	"body": [
    	    "any-body-part"
    	],
    	"form": [
    	    "key=value"
    	],
    	"queryParams": [
    	    "param=value"
    	],
    	"curlOpts": [
    	    "--basic"
    	],
    	"authMode": "HEADER",
    	"authCredential": "test.user",
    	"editorCommand": "echo opening"
    }'
_default_config

assertEquals "'_shttp_protocol' not in config" "any-protocol" "$_shttp_protocol"
assertEquals "'_shttp_domain' not in config" "any-domain" "$_shttp_domain"
assertEquals "'_shttp_method' not in config" "GET" "$_shttp_method"
assertEquals "'_shttp_base_path' not in config" "any-base-path" "$_shttp_base_path"
assertEquals "'_shttp_endpoint' not in config" "any-endpoint" "$_shttp_endpoint"

_length=${#_shttp_headers[@]}
assertEquals "'_shttp_headers' not in config" 1 "$_length"

_length=${#_shttp_body[@]}
assertEquals "'_shttp_body' not in config" 1 "$_length"

_length=${#_shttp_form[@]}
assertEquals "'_shttp_form' not in config" 1 "$_length"

_length=${#_shttp_query_params[@]}
assertEquals "'_shttp_query_params' not in config" 1 "$_length"

_length=${#_shttp_curl_opts[@]}
assertEquals "'_shttp_curl_opts' not in config" 1 "$_length"

assertEquals "'_shttp_auth_mode' not in config" "HEADER" "$_shttp_auth_mode"
assertEquals "'_shttp_auth_credential' not in config" "test.user" "$_shttp_auth_credential"
assertEquals "'_shttp_editor_command' not in config" "echo opening" "$_shttp_editor_command"

_reset_req_vars
remove protocol
remove domain
remove basePath
remove endpoint
remove method
remove headers
remove body
remove form
remove queryParams
remove curlOpts
remove authMode
remove authCredential
remove editorCommand


#  -test Default values to request variables
_default_vars

assertEquals "'_shttp_protocol' is not empty" "https" "$_shttp_protocol"
assertEquals "'_shttp_url' is not empty" "https://" "$_shttp_url"
assertEquals "'_shttp_auth_mode' is not empty" "SKIP" "$_shttp_auth_mode"
assertTrue "'_shttp_output' is not empty" "-n \"$_shttp_output\""

_reset_req_vars


#  -test Get output directory
_shttp_execution_type="FLOW"
_output_directory="$( _output_dir "flow_request" )"
assertTrue "Output directory for flow not found" "-d \"$_output_directory\""

#  shellcheck disable=SC2034
_shttp_execution_type="REQUEST"
_output_directory="$( _output_dir "single_request" )"
assertTrue "Output directory for request not found" "-d \"$_output_directory\""


#  -test Request execution
_before_request_var="Not executed yet"
_after_request_var="Not executed yet"

url "http://127.0.0.1:5555/info"
method "GET"

before_command() {
    _before_request_var="Executed"
}

after_command() {
    _after_request_var="Executed"
}

_request command

assertEquals "'before_<command>' chain not executed" "Executed" "$_before_request_var"
#  shellcheck disable=SC2154
assertTrue "Trace file does not exist" "-f \"$_shttp_output.trace\""
#  shellcheck disable=SC2154
assertTrue "JSON file does not exist" "-f \"$_shttp_output.output\""
assertEquals "'after_<command>' not executed" "Executed" "$_after_request_var"

_info_pronounced=$( < "$_shttp_output.output" jq ".pronounced" )

assertEquals "Request not executed" "\"shell-ttp\"" "$_info_pronounced"

_reset_req_vars


#  -test Set request method
get_api() { : ; }
_set_method "get_api"
#  shellcheck disable=SC2154
assertEquals "'get_api' has no method" "GET" "$_shttp_method"

_reset_req_vars
post_api() { : ; }
_set_method "post_api"
assertEquals "'post_api' has no method" "POST" "$_shttp_method"

_reset_req_vars
put_api() { : ; }
_set_method "put_api"
#  shellcheck disable=SC2154
assertEquals "'put_api' has no method" "PUT" "$_shttp_method"

_reset_req_vars
patch_api() { : ; }
_set_method "patch_api"
#  shellcheck disable=SC2154
assertEquals "'patch_api' has no method" "PATCH" "$_shttp_method"

_reset_req_vars
delete_api() { : ; }
_set_method "delete_api"
#  shellcheck disable=SC2154
assertEquals "'delete_api' has no method" "DELETE" "$_shttp_method"

_reset_req_vars
head_api() { : ; }
_set_method "head_api"
#  shellcheck disable=SC2154
assertEquals "'head_api' has no method" "HEAD" "$_shttp_method"

_reset_req_vars
options_api() { : ; }
_set_method "options_api"
#  shellcheck disable=SC2154
assertEquals "'options_api' has no method" "OPTIONS" "$_shttp_method"

_reset_req_vars
unknown_api() { : ; }
_set_method "unknown_api"
#  shellcheck disable=SC2154
assertTrue "'unknown_api' has method" "-z \"$_shttp_method\""

_reset_req_vars


#  -test Append if missing header
_append_if_missing_header "Missing-Header" "test/value"

_found=0
#  shellcheck disable=SC2154
for _header in "${_shttp_headers[@]}"; do
    if [[ "$_header" == "Missing-Header:"* ]]; then
        _found=1
        break
    fi
done

assertEquals "'Missing-Header' does not exist" 1 "$_found"

headers "Present-Header: test/value"

_append_if_missing_header "Present-Header" "test/value.new"

_found=0
for _header in "${_shttp_headers[@]}"; do
    if [[ "$_header" == *"test/value.new" ]]; then
        _found=1
        break
    fi
done

assertEquals "'Present-Header' change its value" 0 "$_found"

_reset_req_vars


#  -test Append Content-Type
_append_content_type

_found=0
for _header in "${_shttp_headers[@]}"; do
    if [ "$_header" = "Content-Type: application/json" ]; then
        _found=1
        break
    fi
done

assertEquals "'application/json' is not present" 1 "$_found"

_reset_req_vars
form "key=value"

_append_content_type

_found=0
for _header in "${_shttp_headers[@]}"; do
    if [ "$_header" = "Content-Type: multipart/form-data" ]; then
        _found=1
        break
    fi
done

assertEquals "'multipart/form-data' is not present" 1 "$_found"

_reset_req_vars


#  -test Append Authentication
update "ws/credentials.json" '. + [{
        "id": "auth",
        "username": "auth",
        "password": "t35t",
        "token": "uqweq8u23j23e",
        "type": "Bearer",
        "key": "j77qwj",
        "secret": "uqweq8u23j23e",
        "tokenParam": "api_token",
        "keyParam": "clientId",
        "secretParam": "clientSecret"
    }]'

credential "auth"
authMode "BASIC"

_append_auth

_found=0
#  shellcheck disable=SC2154
for _opt in "${_shttp_curl_opts[@]}"; do
    case "$_opt" in
        "--basic")
            _found=$(( _found+1 ))
        ;;
        "-u auth:t35t")
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "'BASIC' mode not set" 2 "$_found"

_reset_req_vars
credential "auth"
authMode "HEADER"

_append_auth

_found=0
for _header in "${_shttp_headers[@]}"; do
    if [ "$_header" = "Authorization: Bearer uqweq8u23j23e" ]; then
        _found=1
    fi
done

assertEquals "'HEADER' mode not set" 1 "$_found"

_reset_req_vars
credential "auth"
authMode "QTOKEN"

_append_auth

_found=0

#  shellcheck disable=SC2154
for _param in "${_shttp_query_params[@]}"; do
    if [ "$_param" = "api_token=uqweq8u23j23e" ]; then
        _found=1
    fi
done

assertEquals "'QTOKEN' mode not set" 1 "$_found"

_reset_req_vars
credential "auth"
authMode "QKEYSEC"

_append_auth

_found=0

#  shellcheck disable=SC2154
for _param in "${_shttp_query_params[@]}"; do
    case "$_param" in
        clientId=j77qwj)
            _found=$(( _found+1 ))
        ;;
        clientSecret=uqweq8u23j23e)
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "'QKEYSEC' mode not set" 2 "$_found"

_reset_req_vars
credential "auth"
authMode "SKIP"

_append_auth

_length=${#_shttp_curl_opts[@]}
assertEquals "'SKIP' mode not set for cURL options" 0 "$_length"

_length=${#_shttp_query_params[@]}
assertEquals "'SKIP' mode not set for query params" 0 "$_length"

remove apiToken
_reset_req_vars


#  -test Append body to file
body '{ "body": "content" }'
_body_file=$( _append_body_to_file )
assertTrue "Body temporal file does not exist" "-f \"$_body_file\""
_reset_req_vars

_body_file=$( _append_body_to_file )
assertFalse "Body temporal file exists" "-f \"$_body_file\""
_reset_req_vars

body '{' \
    '"body": "content"' \
    '}'
_body_file=$( _append_body_to_file )
assertTrue "Body (parts) temporal file does not exist" "-f \"$_body_file\""
_reset_req_vars

_body_file=$( _append_body_to_file )
assertFalse "Body (parts) temporal file exists" "-f \"$_body_file\""
_reset_req_vars


#  -test Build cURL
url "https://any.host/any/endpoint"
method "POST"
output "output/result"
headers "Defined-Header: test/value"
queryParams "param=value"
form "key=value"
curlOpts "--basic" "-u user:password"

_expected=(
    "curl -X POST -s -v \\"
    "-o \"output/result.output\" \\"
    "-H \"Defined-Header: test/value\" \\"
    "-d \"param=value\" \\"
    "-F \"key=value\" \\"
    "--data-binary \"@ws/body_file.json.temp\" \\"
    "--basic \\"
    "-u user:password \\"
    "-w \"@output/result.format\" \\"
    "https://any.host/any/endpoint > \"output/result.trace\" 2>&1"
)
_curl=$( _build_curl "ws/body_file.json.temp" )

assertEquals "'cURL' command bad" "${_expected[*]}" "$_curl"

_reset_req_vars


#  -test cURL format
output "output/format"
_curl_format
_write_out=$( < "output/format.format" )
assertTrue "Output format not found" "-f \"output/format.format\""
assertTrue "Output format content is empty" "-n \"$_write_out\""
_reset_req_vars


#  -test Clean trace
_trace=(
    "* Unused line"
    "> GET /endpoint HTTP/1.1"
    "> "
    "> HTTP/1.1 200 Ok"
    "* Unused line"
    "{ [5 bytes data]"
)
output "output/trace.$( date '+%s.%N' ).json.tmp"
for _line in "${_trace[@]}"; do
    echo "$_line" | tee -a "$_shttp_output.trace" > /dev/null
done

_body_file="ws/body.$( date '+%s.%N' ).json.tmp"
echo '{ "body": "content" }' | tee -a "$_body_file" > /dev/null

_curl='curl https://any.host/any/endpoint'

_clean_trace "$_curl" "$_body_file"

#  shellcheck disable=SC2178
_expected='GET /endpoint HTTP/1.1

HTTP/1.1 200 Ok

>>>>> body
{ "body": "content" }


>>>>> curl
curl https://any.host/any/endpoint' 
#  shellcheck disable=SC2178
_trace=$( cat "$_shttp_output.trace" )

#  shellcheck disable=SC2128
assertEquals "Clean trace file does not work" "$_expected" "$_trace"

_reset_req_vars


#  -test Save history

_shttp_output="output/history"
_save_history saving_request REQUEST

assertTrue "History directory for 'REQUEST' not found" "-d hist/test_runner"
assertTrue "History file for 'REQUEST' not found" "-f hist/test_runner/saving_request.json"

_shttp_output=""

_shttp_output_flow="output/flow-history"
_save_history saving_flow FLOW

assertTrue "History directory for 'FLOW' not found" "-d hist/test_runner"
assertTrue "History file for 'FLOW' not found" "-f hist/test_runner/saving_flow.json"

#  shellcheck disable=SC2034
_shttp_output_flow=""


#  -test Open editor command
put program "\"jq\""

#  shellcheck disable=SC2016
editor '_command_version="$( $( get program ) --version )"'

_editor_command

#  shellcheck disable=SC2154
assertTrue "Open editor command does not work" "-n \"$_command_version\""

_reset_req_vars


#  -test Script finallly
echo '{}' > ws/cleanable_config.json.tmp

_finally_http_api

assertFalse "Workspace file is currently exists" "-f ws/cleanable_config.json.tmp"

echo '{ }' > "ws/.override.json.tmp"
