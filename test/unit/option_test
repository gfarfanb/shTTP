#! /usr/bin/env bash
#  Tests for 'http_api' option functions.
#  -author Giovanni FarfÃ¡n B.


#  -test List available commands
_commands=( $( _list_commands ) )
_found=0
for _command in "${_commands[@]}"; do
    case "$_command" in
        info | warning | error | fatal)
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "Command not found" 4 "$_found"


#  -test Look for parameters
_previous_value=()
_callback_function() {
    local _new=${1:-''}
    _previous_value+=( "$_new" )
}
_look_for_params "_callback_function" "--new" "command" \
    "--new" "A" \
    "--save" "key" "\"value\"" \
    "--new" "B" \
    "--new" "C" \
    "--remove" "key" \
    "--new" "D" \
    "--basic"

_found=0
for _val in "${_previous_value[@]}"; do
    case "$_val" in
        A | B | C | D )
            _found=$(( _found+1 ))
        ;;
    esac
done
assertEquals "Invalid parameters length" 4 "$_found"


#  -test Set option
_set_config "priorityVal" "\"value\""
put priorityVal "\"new.value\""
_priority_val=$( get priorityVal )
assertEquals "Unexpected 'setConfig' value" "value" "$_priority_val"


#  -test Set environment
echo '{ }' > ws/config.test.json
echo '[ ]' > ws/credentials.test.json

_set_env "test"

#  shellcheck disable=SC2154
assertEquals "Configuration 'test' file not found" "ws/config.test.json" "$_shttp_env"
#  shellcheck disable=SC2154
assertEquals "Credentials 'test' file not found" "ws/credentials.test.json" "$_shttp_creds"

_set_env
rm -f ws/config.test.json
rm -f ws/credentials.test.json


#  -test Copy environment
_copy_env default env
assertTrue "Configuration 'env' file does not exists" "-f ws/config.env.json"
assertTrue "Credentials 'env' file does not exists" "-f ws/credentials.env.json"

rm -f ws/config.env.json
rm -f ws/credentials.env.json


#  -test Add option
_add_config "addedVal" "\"value\""
_added_val=$( get addedVal )
assertEquals "'addedVal' not found" "value" "$_added_val"


#  -test Get option
put expectedVal "\"value\""
_expected_val=$( _get_config "expectedVal" )
assertEquals "'expectedVal' not found" "value" "$_expected_val"


#  -test Remove option
put removedVal "\"value\""
_remove_config "removedVal"
_null_val=$( get removedVal )
assertEquals "'removedVal' found" "null" "$_null_val"


#  -test Get keys option
put namedKey -1
_keys=( $( _get_config_keys ) )
_found=0
for _key in "${_keys[@]}"; do
    if [ "$_key" = "namedKey" ]; then
        _found=1
        break;
    fi
done

assertEquals "'namedKey' key not found" 1 "$_found"


#  -test Local option
_set_localhost "5555"
#  shellcheck disable=SC2154
assertEquals "Localhost not assigned" "localhost:5555" "$_shttp_domain"


#  -test Set authentication credential option
_set_credentials "test.user"
#  shellcheck disable=SC2154
assertEquals "Credential not assigned" "test.user" "$_shttp_auth_credential"


#  -test Open editor option
put editorCommand "\"vi results.json\""
_open_editor
#  shellcheck disable=SC2154
assertEquals "'_shttp_editor_command' not assigned" "vi results.json" "$_shttp_editor_command"


#  -test Clean option
echo '{}' > output/cleanable_output.json

_clean_output_files

assertFalse "Output file is currently exists" "-f output/cleanable_output.json"
