#! /usr/bin/env bash
#  Tests for 'http_api' option functions.
#  -author Giovanni Farfan B.


#  -test Look for parameters
_shttp_registered_opts["--new"]="_callback_function"
_previous_value=()
_callback_function() {
    #  shellcheck disable=SC2034
    local _opt=${1:-}
    local _new=${2:-}
    _previous_value+=( "$_new" )
}
_look_for_params "--new" "command" \
    "--new" "A" \
    "--save" "key" "\"value\"" \
    "--new" "B" \
    "--new" "C" \
    "--remove" "key" \
    "--new" "D" \
    "--basic"

_found=0
for _val in "${_previous_value[@]}"; do
    case "$_val" in
        A | B | C | D )
            _found=$(( _found+1 ))
        ;;
    esac
done
assertEquals "Invalid parameters length" 4 "$_found"


#  -test Register option
_register_opt --change _change_func
_callback_func="${_shttp_registered_opts[--change]}"
assertEquals "Option not registered" "_change_func" "$_callback_func"


#  -test Add help content

#  shellcheck disable=SC2154
_last_length=${#_shttp_help_content[@]}
_last_length=$(( _last_length+2 ))
_help_content '--new-option-1' '--new-option-2'
_length=${#_shttp_help_content[@]}
assertEquals "Help content not added" "$_last_length" "$_length"


#  -test List available commands
_commands=( $( _list_commands --list ) )
_found=0
for _command in "${_commands[@]}"; do
    case "$_command" in
        info | warn | error | fatal | failed)
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "Command not found" 5 "$_found"


#  -test List environment IDs
_envs=( $( _get_envs --envs ) )
_found=0
for _env in "${_envs[@]}"; do
    case "$_env" in
        default)
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "Environment IDs not found" 1 "$_found"


#  -test Copy environment
_copy_env --copy default env
assertTrue "Configuration 'env' file does not exist" "-f ws/config.env.json"
assertTrue "Credentials 'env' file does not exist" "-f ws/credentials.env.json"

rm -f ws/config.env.json
rm -f ws/credentials.env.json


#  -test Remove environment
echo '{ }' > ws/config.temp.json
echo '[ ]' > ws/credentials.temp.json

_del_env --del temp

assertFalse "Configuration 'env' file exists" "-f ws/config.temp.json"
assertFalse "Credentials 'env' file exists" "-f ws/credentials.temp.json"


#  -test Add option
_add_config --add "addedVal" "\"value\""
_added_val=$( get addedVal )
assertEquals "'addedVal' not found" "value" "$_added_val"


#  -test Get option
put expectedVal "\"value\""
_expected_val=$( _get_config --get "expectedVal" )
assertEquals "'expectedVal' not found" "value" "$_expected_val"


#  -test Remove option
put removedVal "\"value\""
_remove_config --remove "removedVal"
_null_val=$( get removedVal )
assertIsNull "'removedVal' found" "$_null_val"


#  -test Get keys option
put namedKey -1
_keys=( $( _get_config_keys --keys ) )
_found=0
for _key in "${_keys[@]}"; do
    if [ "$_key" = "namedKey" ]; then
        _found=1
        break;
    fi
done

assertEquals "'namedKey' key not found" 1 "$_found"


#  -test Add part option
_shttp_auth_credential="add-part-opt"
update "ws/credentials.json" '. + [{
        "id": "add-part-opt"
    }]'

_add_part --part -u test.user
_part_val=$( getPart username )
assertEquals "'username' not found" "test.user" "$_part_val"

_add_part --part -p t35t
_part_val=$( getPart password )
assertEquals "'password' not found" "t35t" "$_part_val"

_add_part --part -k 12345
_part_val=$( getPart key )
assertEquals "'key' not found" "12345" "$_part_val"

_add_part --part -s 1234567890
_part_val=$( getPart secret )
assertEquals "'secret' not found" "1234567890" "$_part_val"

_add_part --part -t 0987654321
_part_val=$( getPart token )
assertEquals "'token' not found" "0987654321" "$_part_val"

_add_part --part tokenParam access_token
_part_val=$( getPart tokenParam )
assertEquals "'tokenParam' not found" "access_token" "$_part_val"

_add_part --part keyParam clientId
_part_val=$( getPart keyParam )
assertEquals "'keyParam' not found" "clientId" "$_part_val"

_add_part --part secretParam clientSecret
_part_val=$( getPart secretParam )
assertEquals "'secretParam' not found" "clientSecret" "$_part_val"

_shttp_auth_credential=""


#  -test Get credential IDs
update "ws/credentials.json" '. + [{
        "id": "id-test",
        "username": "test",
        "password": "t35t"
    },{
        "id": "id-cred",
        "username": "test",
        "password": "t35t"
    }]'
_ids=( $( _get_cred_ids --creds ) )
_found=0
for _id in "${_ids[@]}"; do
    case "$_id" in
        id-test | id-cred)
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "Credential IDs not found" 2 "$_found"


#  -test Get credential keys
update "ws/credentials.json" '. + [{
        "id": "keys",
        "username": "test",
        "password": "t35t"
    }]'
_keys=( $( _get_cred_keys --cred-keys keys ) )
_found=0
for _key in "${_keys[@]}"; do
    case "$_key" in
        id | username | password)
            _found=$(( _found+1 ))
        ;;
    esac
done

assertEquals "Credential keys not found" 3 "$_found"


#  -test Clean option
echo '{}' > output/cleanable_output.json

_clean_output_files --clean

assertFalse "Output file is currently exists" "-f output/cleanable_output.json"


#  -test Set environment
echo '{ }' > ws/config.test.json
echo '[ ]' > ws/credentials.test.json

_set_env --env "test"

#  shellcheck disable=SC2154
assertEquals "Configuration 'test' file not found" "ws/config.test.json" "$_shttp_env"
#  shellcheck disable=SC2154
assertEquals "Credentials 'test' file not found" "ws/credentials.test.json" "$_shttp_creds"

_set_env --env
rm -f ws/config.test.json
rm -f ws/credentials.test.json


#  -test Set credential
_set_credential --cred "test.set"
#  shellcheck disable=SC2154
assertEquals "Set credential does not work" "test.set" "$_shttp_auth_credential"
_shttp_auth_credential=""


#  -test Set option
_set_config --set "priorityVal" "\"value\""
put priorityVal "\"new.value\""
_priority_val=$( get priorityVal )
assertEquals "Unexpected 'setConfig' value" "value" "$_priority_val"


#  -test Local option
_set_localhost --local "5555"
#  shellcheck disable=SC2154
assertEquals "Protocol not assigned" "http" "$_shttp_protocol"
#  shellcheck disable=SC2154
assertEquals "Localhost not assigned" "localhost" "$_shttp_domain"
#  shellcheck disable=SC2154
assertEquals "Port not assigned" "5555" "$_shttp_port"


#  -test Port option
_set_port --port "5555"
#  shellcheck disable=SC2154
assertEquals "Port not assigned" "5555" "$_shttp_port"


#  -test Set authentication credential option
_set_auth_mode --auth-basic "test.user"
#  shellcheck disable=SC2154
assertEquals "Credential not assigned" "test.user" "$_shttp_auth_credential"
#  shellcheck disable=SC2154
assertEquals "Authorization mode not assigned" "BASIC" "$_shttp_auth_mode"
_shttp_auth_mode=""


#  -test Set request execution times option
_set_times --times 5
#  shellcheck disable=SC2154
assertEquals "Request execution times not assigned" 5 "$_shttp_request_times"
_shttp_request_times=0


#  -test Open editor option
_shttp_open_editor=0
_set_open_flag --open
#  shellcheck disable=SC2154
assertEquals "Open editor command not assigned" 1 "$_shttp_open_editor"
_shttp_open_editor=0


#  -test Enable request mock
_enable_mock --mock
assertEquals "Enable mock not assigned" 1 "$_shttp_mock_enabled"
_shttp_mock_enabled=0
