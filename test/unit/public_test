#! /usr/bin/env bash
#  Tests for 'http_api' public functions.
#  -author Giovanni FarfÃ¡n B.


#  -test Request step flow
_step_executed="Not executed yet"
get_repo_step() {
    url "http://127.0.0.1:5555/info"
    _step_executed="Executed-step"
}
step get_repo_step
assertEquals "'step_get_repo' not executed" "Executed-step" "$_step_executed"


#  -beforeTests
output "output/public-output.$( date '+%s.%N' )"
#  shellcheck disable=SC2154
echo '{"id":"5s43u-323we"}' > "$_shttp_output.output"


#  -test Update JSON config file
update "ws/config.json" ". + { \"update\": \"updated\" }"
_update=$( < "ws/config.json" jq ".update" )
assertEquals "'update' not found" "\"updated\"" "$_update"

update "ws/config.json" "del(.update)"
_update=$( < "ws/config.json" jq ".update" )
assertEquals "'update' found" "null" "$_update"


#  -test Put key-value config
put '.id'
_id=$( < "ws/config.json" jq ".id" )
assertEquals "'id' not found" "\"5s43u-323we\"" "$_id"

put 'jqId' '.id'
_jqId=$( < "ws/config.json" jq ".jqId" )
assertEquals "'jqId' not found" "\"5s43u-323we\"" "$_jqId"

put 'rawId' '"4jj43-34mdwe"'
_rawId=$( < "ws/config.json" jq ".rawId" )
assertEquals "'rawId' not found" "\"4jj43-34mdwe\"" "$_rawId"

put 'idx' 5
_idx=$( < "ws/config.json" jq ".idx" )
assertEquals "'idx' not found" "5" "$_idx"

put 'flag' true
_flag=$( < "ws/config.json" jq ".flag" )
assertEquals "'flag' not found" "true" "$_flag"

put 'null' null
_null=$( < "ws/config.json" jq ".null" )
assertEquals "'null' not found" "null" "$_null"

put 'object' '{}'
_object=$( < "ws/config.json" jq ".object" )
assertEquals "'object' not found" "{}" "$_object"


#  -test Get key-value config
_id=$( get id )
assertEquals "'id' not found" "5s43u-323we" "$_id"

_jqId=$( get jqId )
assertEquals "'jqId' not found" "5s43u-323we" "$_jqId"

_rawId=$( get rawId )
assertEquals "'rawId' not found" "4jj43-34mdwe" "$_rawId"

_idx=$( get idx )
assertEquals "'idx' not found" "5" "$_idx"

_flag=$( get flag )
assertEquals "'flag' not found" "true" "$_flag"

_null=$( get null )
assertEquals "'null' not found" "null" "$_null"

_object=$( get object )
assertEquals "'object' not found" "{}" "$_object"

_default_value=$( get unknown "default" )
assertEquals "'default' found" "default" "$_default_value"

_unknown=$( get unknown )
assertEquals "'unknown' found" "null" "$_unknown"

#  shellcheck disable=SC2034
update "ws/override.json.tmp" ". + { \"tempConfig\": \"7wjedw9djwejd\" }"
_temp_config=$( get tempConfig )
assertEquals "'tempConfig' not found" "7wjedw9djwejd" "$_temp_config"


#  -test Remove key-value config
remove '.id'
_id=$( get id )
assertEquals "'id' found" "null" "$_id"

remove jqId
_jqId=$( get jqId )
assertEquals "'jqId' found" "null" "$_jqId"

remove rawId
_rawId=$( get rawId )
assertEquals "'rawId' found" "null" "$_rawId"

remove idx
_idx=$( get idx )
assertEquals "'idx' found" "null" "$_idx"

remove flag
_flag=$( get flag )
assertEquals "'flag' found" "null" "$_flag"

remove null
_null=$( get null )
assertEquals "'null' found" "null" "$_null"

remove object
_object=$( get object )
assertEquals "'object' found" "null" "$_object"

remove unknown
_unknown=$( get unknown )
assertEquals "'unknown' found" "null" "$_unknown"


#  -test Get JSON output
_output_value=$( getOutput id )
assertEquals "Output 'id' not found" "5s43u-323we" "$_output_value"


#  -test Is true assertion
_input="true"
isTrue "Is false" "-n \"$_input\""
isTrue "Is false" "-z \"$_input\""
#  shellcheck disable=SC2154
assertEquals "Incorrect number of assertions for 'isTrue'" 2 "$_shttp_assertions"
#  shellcheck disable=SC2154
assertEquals "Incorrect number of failures for 'isTrue'" 1 "$_shttp_failures"

_shttp_assertions=0
_shttp_failures=0


#  -test Is false assertion
_input=""
isFalse "Is true" "-n \"$_input\""
isFalse "Is true" "-z \"$_input\""
#  shellcheck disable=SC2154
assertEquals "Incorrect number of assertions for 'isFalse'" 2 "$_shttp_assertions"
#  shellcheck disable=SC2154
assertEquals "Incorrect number of failures for 'isFalse'" 1 "$_shttp_failures"

_shttp_assertions=0
_shttp_failures=0


#  -test Are equals assertion
_input="5"
areEquals "Are not equals" 5 "$_input"
areEquals "Are not equals" 10 "$_input"
#  shellcheck disable=SC2154
assertEquals "Incorrect number of assertions for 'areEquals'" 2 "$_shttp_assertions"
#  shellcheck disable=SC2154
assertEquals "Incorrect number of failures for 'areEquals'" 1 "$_shttp_failures"

_shttp_assertions=0
_shttp_failures=0


#  -test Are not equals assertion
_input="5"
areNotEquals "Are equals" 10 "$_input"
areNotEquals "Are equals" 5 "$_input"
#  shellcheck disable=SC2154
assertEquals "Incorrect number of assertions for 'areNotEquals'" 2 "$_shttp_assertions"
#  shellcheck disable=SC2154
assertEquals "Incorrect number of failures for 'areNotEquals'" 1 "$_shttp_failures"

_shttp_assertions=0
_shttp_failures=0
