#! /usr/bin/env bash
#  Tests for 'http_api' public functions.
#  -author Giovanni FarfÃ¡n B.


#  -test Request step flow
_step_executed="Not executed yet"
get_repo_step() {
    url "http://127.0.0.1:5555/info"
    _step_executed="Executed-step"
}
step get_repo_step
assertEquals "'step_get_repo' not executed" "Executed-step" "$_step_executed"


#  -beforeTests
output "output/public-output.$( date '+%s.%N' )"
#  shellcheck disable=SC2154
echo '{"id":"5s43u-323we"}' > "$_shttp_output.output"


#  -test Update JSON config file
update "ws/config.json" ". + { \"update\": \"updated\" }"
_update=$( < "ws/config.json" jq ".update" )
assertEquals "'update' not found" "\"updated\"" "$_update"

update "ws/config.json" "del(.update)"
_update=$( < "ws/config.json" jq ".update" )
assertEquals "'update' found" "null" "$_update"


#  -test Put key-value config
put '.id'
_id=$( < "ws/config.json" jq ".id" )
assertEquals "'id' not found" "\"5s43u-323we\"" "$_id"

put 'jqId' '.id'
_jqId=$( < "ws/config.json" jq ".jqId" )
assertEquals "'jqId' not found" "\"5s43u-323we\"" "$_jqId"

put 'rawId' '"4jj43-34mdwe"'
_rawId=$( < "ws/config.json" jq ".rawId" )
assertEquals "'rawId' not found" "\"4jj43-34mdwe\"" "$_rawId"

put 'idx' 5
_idx=$( < "ws/config.json" jq ".idx" )
assertEquals "'idx' not found" "5" "$_idx"

put 'flag' true
_flag=$( < "ws/config.json" jq ".flag" )
assertEquals "'flag' not found" "true" "$_flag"

put 'null' null
_null=$( < "ws/config.json" jq ".null" )
assertEquals "'null' not found" "null" "$_null"

put 'object' '{}'
_object=$( < "ws/config.json" jq ".object" )
assertEquals "'object' not found" "{}" "$_object"


#  -test Get key-value config
_id=$( get id )
assertEquals "'id' not found" "5s43u-323we" "$_id"

_jqId=$( get jqId )
assertEquals "'jqId' not found" "5s43u-323we" "$_jqId"

_rawId=$( get rawId )
assertEquals "'rawId' not found" "4jj43-34mdwe" "$_rawId"

_idx=$( get idx )
assertEquals "'idx' not found" "5" "$_idx"

_flag=$( get flag )
assertEquals "'flag' not found" "true" "$_flag"

_null=$( get null )
assertEquals "'null' not found" "null" "$_null"

_object=$( get object )
assertEquals "'object' not found" "{}" "$_object"

_default_value=$( get unknown "default" )
assertEquals "'default' found" "default" "$_default_value"

_unknown=$( get unknown )
assertEquals "'unknown' found" "null" "$_unknown"

#  shellcheck disable=SC2034
update "ws/.override.json.tmp" ". + { \"tempConfig\": \"7wjedw9djwejd\" }"
_temp_config=$( get tempConfig )
assertEquals "'tempConfig' not found" "7wjedw9djwejd" "$_temp_config"


#  -test Remove key-value config
remove '.id'
_id=$( get id )
assertEquals "'id' found" "null" "$_id"

remove jqId
_jqId=$( get jqId )
assertEquals "'jqId' found" "null" "$_jqId"

remove rawId
_rawId=$( get rawId )
assertEquals "'rawId' found" "null" "$_rawId"

remove idx
_idx=$( get idx )
assertEquals "'idx' found" "null" "$_idx"

remove flag
_flag=$( get flag )
assertEquals "'flag' found" "null" "$_flag"

remove null
_null=$( get null )
assertEquals "'null' found" "null" "$_null"

remove object
_object=$( get object )
assertEquals "'object' found" "null" "$_object"

remove unknown
_unknown=$( get unknown )
assertEquals "'unknown' found" "null" "$_unknown"


#  -test Put credential part
_shttp_auth_credential="put-part-test"
update "ws/credentials.json" '. + [{
        "id": "put-part-test"
    }]'
putPart secret hidden
putPart visible "\"shown\"" 0

_put_part_idx=$( < "ws/credentials.json" \
    jq "map(.id==\"$_shttp_auth_credential\") | index(true)" )

_hidden_val=$( < "ws/credentials.json" jq ".[$_put_part_idx].secret" )
_visible_val=$( < "ws/credentials.json" jq ".[$_put_part_idx].visible" )

assertTrue "Credential parts not found" "-f ws/.credparts"
assertEquals "Hidden credential part not found" "null" "$_hidden_val"
assertEquals "Visible credential part not found" "\"shown\"" "$_visible_val"

_hidden_key="$_shttp_auth_credential->secret:="
_hidden_key=$( echo "$_hidden_key" | base64 )
_hidden_val=$( grep -e "^$_hidden_key" "ws/.credparts" )

assertEquals "Hidden value not found" "cHV0LXBhcnQtdGVzdC0+c2VjcmV0Oj0KaGlkZGVuCg==" "$_hidden_val"

_shttp_auth_credential=""


#  -test Get credential part
_shttp_auth_credential="get-part-test"
update "ws/credentials.json" '. + [{
        "id": "get-part-test",
        "username": "test",
        "password": "Hidden value",
        "token": "Hidden value",
        "type": "token",
        "key": "12345",
        "secret": "Hidden value",
        "tokenParam": "access_token",
        "keyParam": "clientId",
        "secretParam": "clientSecret",
    }]'
echo "Z2V0LXBhcnQtdGVzdC0+cGFzc3dvcmQ6PQo=dDM1dAo=" | tee -a "ws/.credparts" > /dev/null
echo "Z2V0LXBhcnQtdGVzdC0+dG9rZW46PQo=MTIzNDU2Nzg5MAo=" | tee -a "ws/.credparts" > /dev/null
echo "Z2V0LXBhcnQtdGVzdC0+c2VjcmV0Oj0KMTIzNDU2Nzg5MAo=" | tee -a "ws/.credparts" > /dev/null

_credential_username=""
_credential_password=""
_credential_token=""
_credential_type=""
_credential_token=""
_credential_secret=""
_credential_token_param=""
_credential_key_param=""
_credential_secret_param=""

_credential_username=$( getPart username )
assertEquals "Username part not found" "test" "$_credential_username"

_credential_password=$( getPart password )
assertEquals "Password part not found" "t35t" "$_credential_password"

_credential_token=$( getPart token )
assertEquals "Token part not found" "1234567890" "$_credential_token"

_credential_type=$( getPart type )
assertEquals "Type part not found" "token" "$_credential_type"

_credential_key=$( getPart key )
assertEquals "Key part not found" "12345" "$_credential_key"

_credential_secret=$( getPart secret )
assertEquals "Secret part not found" "1234567890" "$_credential_secret"

_credential_token_param=$( getPart tokenParam )
assertEquals "Token parameter part not found" "access_token" "$_credential_token_param"

_credential_key_param=$( getPart keyParam )
assertEquals "Key parameter part not found" "clientId" "$_credential_key_param"

_credential_secret_param=$( getPart secretParam )
assertEquals "Secret parameter part not found" "clientSecret" "$_credential_secret_param"

_credential_unknown=$( getPart unknown "apiToken" )
assertEquals "Unknown part found" "apiToken" "$_credential_unknown"

_shttp_auth_credential=""


#  -test Get JSON output
_output_value=$( getOutput id )
assertEquals "Output 'id' not found" "5s43u-323we" "$_output_value"
