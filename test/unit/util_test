#! /usr/bin/env bash
#  Tests for 'http_api' util functions.
#  -author Giovanni Farfan B.


#  -test Reverse string
_rev_input="reverse"
_rev_input=$( str_rev "$_rev_input" )

assertEquals "Reverse is not working" "esrever" "$_rev_input"


#  -test Random string
_generated_strings=()

for (( _i=1; _i<=100; _i++ )); do
    _random_string=$( str_rnd 10 )
    _generated_length=${#_generated_strings[@]}
    _found=0
    if (( _generated_length > 0 )); then
        for _generated in "${_generated_strings[@]}"; do
            if [ "$_generated" = "_random_string" ]; then
                _found=1
            fi
        done
    fi
    if [ "$_found" = "0" ]; then
        _generated_strings+=( "$_random_string" )
    fi
done

assertEquals "Random repeated values found" 100 "${#_generated_strings[@]}"


#  -test Array join
_elements_parts=( "127" "0" "0" "1" )
_localhost=$( arr_join '.' "${_elements_parts[@]}" )
assertEquals "Joining does not work" "127.0.0.1" "$_localhost"


#  -test Array like
_elements_parts=( 
    "Content-Type: application/json"
    "Authentication: 12345"
    "Cookie: 12345"
    "Accept: application/json" 
)

_element_found=$( arr_like "Content-Type" "${_elements_parts[@]}" )
assertEquals "Array element not found" 1 "$_element_found"

_element_found=$( arr_like "Content_Type" "${_elements_parts[@]}" )
assertEquals "Array element found" 0 "$_element_found"

_element_found=$( arr_like "content-type" "${_elements_parts[@]}" )
assertEquals "Array element not found" 1 "$_element_found"


#  -test Array random
_array=( 1 2 3 4 5 )
_picked=$( arr_rnd "${_array[@]}" )
_found=0
for _i in "${_array[@]}"; do
    if [ "$_i" = "$_picked" ]; then
        _found=1
        break;
    fi
done

assertEquals "Array element not found" 1 "$_found"


#  -test Boolean random
_values=( true false )
_picked=$( bool_rnd )
_found=0
for _i in "${_values[@]}"; do
    if [ "$_i" = "$_picked" ]; then
        _found=1
        break;
    fi
done

assertEquals "Boolean not found" 1 "$_found"


#  -test Number random
_number=$( num_rnd 1 )
assertEquals "Invalid integer [$_number]" 1 ${#_number}

_number=$( num_rnd 1 1 )
assertEquals "Invalid float [$_number]" 3 "${#_number}"

_number=$( num_rnd 1 1 1 )
assertEquals "Invalid negative float [$_number]" 4 "${#_number}"

_number=$( num_rnd 1 1 2 )
assertTrue "Invalid random sign float [$_number]" "\"${#_number}\" -gt \"2\""


#  -test Number add
_result=$( num_add 5 5 )
assertEquals "Invalid add result [$_result]" 10 "$_result"

_result=$( num_add 5.1234567890 4.876543211 )
assertEquals "Invalid add result [$_result]" 10 "$_result"


#  -test Number subtract
_result=$( num_subtract 8 3 )
assertEquals "Invalid subtract result [$_result]" 5 "$_result"

_result=$( num_subtract 8.1234567890 3.1234567890 )
assertEquals "Invalid subtract result [$_result]" 5 "$_result"


#  -test Number multiply
_result=$( num_multiply 5 5 )
assertEquals "Invalid multiply result [$_result]" 25 "$_result"

_result=$( num_multiply 10000 0.0025 )
assertEquals "Invalid multiply result [$_result]" 25 "$_result"


#  -test Number divide
_result=$( num_divide 25 5 )
assertEquals "Invalid divide result [$_result]" 5 "$_result"

_result=$( num_divide 0.0025 25 )
assertEquals "Invalid divide result [$_result]" 0.0001 "$_result"


#  -test Number module
_result=$( num_modulo 25 5 )
assertEquals "Invalid module result [$_result]" 0 "$_result"

_result=$( num_modulo 25.12345 9.12345 )
assertNotEquals "Invalid module result [$_result]" 0 "$_result"


#  -test Now in milliseconds
_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms )
assertTrue "Invalid milliseconds timestamp" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_timestamp=$( num_add "$_timestamp" 5000 )
_now=$( now_ms '+5s' )
assertTrue "Invalid milliseconds timestamp [+seconds]" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms '-5s' )
assertTrue "Invalid milliseconds timestamp [-seconds]" "$_timestamp -gt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_timestamp=$( num_add "$_timestamp" 300000 )
_now=$( now_ms '+5m' )
assertTrue "Invalid milliseconds timestamp [+minutes]" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms '-5m' )
assertTrue "Invalid milliseconds timestamp [-minutes]" "$_timestamp -gt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_timestamp=$( num_add "$_timestamp" 18000000 )
_now=$( now_ms '+5h' )
assertTrue "Invalid milliseconds timestamp [+hours]" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms '-5h' )
assertTrue "Invalid milliseconds timestamp [-hours]" "$_timestamp -gt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_timestamp=$( num_add "$_timestamp" 432000000 )
_now=$( now_ms '+5D' )
assertTrue "Invalid milliseconds timestamp [+days]" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms '-5D' )
assertTrue "Invalid milliseconds timestamp [-days]" "$_timestamp -gt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_timestamp=$( num_add "$_timestamp" 3024000000 )
_now=$( now_ms '+5W' )
assertTrue "Invalid milliseconds timestamp [+weeks]" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms '-5W' )
assertTrue "Invalid milliseconds timestamp [-weeks]" "$_timestamp -gt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_timestamp=$( num_add "$_timestamp" 13149000000 )
_now=$( now_ms '+5M' )
assertTrue "Invalid milliseconds timestamp [+months]" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms '-5M' )
assertTrue "Invalid milliseconds timestamp [-months]" "$_timestamp -gt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_timestamp=$( num_add "$_timestamp" 157788000000 )
_now=$( now_ms '+5Y' )
assertTrue "Invalid milliseconds timestamp [+years]" "$_timestamp -lt $_now"

_timestamp=$( date '+%s%N' | cut -b1-13 )
_now=$( now_ms '-5Y' )
assertTrue "Invalid milliseconds timestamp [-years]" "$_timestamp -gt $_now"


#  -test Remove map entry
_test_map_array=(
    "Content-Type: application/json"
    "Content-Type: application/json"
    "Cookie: jh234jh2kj23h234k23h23423#qwe"
)
remove_map "Content-Type" "_test_map_array"
_length=${#_test_map_array[@]}

assertEquals "Entries in the map were not removed" "1" "$_length"


_test_map_array=()
remove_map "Content-Type" "_test_map_array"
_length=${#_test_map_array[@]}

assertEquals "Error with empty map" "0" "$_length"


#  -test Put map entry
_test_map_array=(
    "Content-Type: application/xml"
)
put_map "Content-Type" ": application/json" "_test_map_array"
#  shellcheck disable=SC2124
_content="${_test_map_array[@]}"

assertEquals "Initial entry is not found in the map" "Content-Type: application/json" "$_content"


_test_map_array=(
    "Content-Type: application/xml"
    "Content-Type: application/txt"
)
put_map "Content-Type" ": application/json" "_test_map_array"
#  shellcheck disable=SC2124
_content="${_test_map_array[@]}"

assertEquals "Map not updated" "Content-Type: application/json" "$_content"


_test_map_array=(
    "Content-Type: application/xml"
)
put_map "Cookie" ": jh234jh2kj23h234k23h23423#qwe" "_test_map_array"
_length=${#_test_map_array[@]}

assertEquals "New entry is not found in the map" "2" "$_length"


_test_map_array=()
put_map "Content-Type" ": application/json" "_test_map_array"
_length=${#_test_map_array[@]}

assertEquals "Map is empty after put operation" "1" "$_length"
